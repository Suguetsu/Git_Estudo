
Nunca criar uma branch a partir de outra que não seja a master..

Ao mudar de branch sem commitar os arquivos da branch anterior 
passam pra branch atual, se o commit for feito as mudanças se 
misturam com a branch atual.

SEMPRE COMMITAR ANTES DE MUDAR DE BRANCH

Antes de criar uma nova branch, de um pull para atualizar o projeto.

Para atualizar a branch pode-se dar um merge atraves do branch
atual com a master, para atulizar o branch que se está trabalhando, 
nunca faça isso a partir da master e sim do seu branch. Isso se sua branch 
estiver muito atrasada; Isso se o projeto for seu, se não quem deve
fazer isso é a empresa, ou dev superior.

cd + nome da pasta, muda o terminal do git para dentro da pasta.
cd + .. Volta para a pasta raiz do projeto.

git mv => comando para renomear arquivo
git rm => comando para remover arquivo
git branch => visualiza as branchs ativas
gti branch -d + <nomeBranch>  => Deleta a branch
git checkout -b + <nomeNovaBranch> => Cria uma nova branch e muda pra ela.
git branch + <nomeNovaBranch> Cria uma nova branch mas não muda pra ela.
git merge + <nomeBranch> Une as alterações da branch na master,
isso deve ser feito a partir da master.
git stash joga o codigo da branch no lixo.
git stash list mostra todas as stash 
git stash apply + posição do arquivo, recupera a stash
git stash show -p + <numero> mostra as mudanças feitas.


git tag -a + <Nome>  + msn
A tag é diferente do stash, serve como um checkpoint.
Serve para salvar o codigo.
git tag show + tag, mostra as alterações feitas
git tag checkout + tag, muda para a tag.

Ultilizadas para demarcar estágios de desenvolvimento.

git fetch -a, recebe todas as branchs.
$ git commit --amend //  faz um commi antigo ir para frente


Submódulos. 

Submódulos é a maneira de possuir dois ou mais projetos em um só repositório.

git submodule add <repo> + adiciona um submodulo
git submodule, mostra os submoduloos criados.
git commit para colocar no stage e
git push --recurse-submodules=on-demand,
 para enviar os arquivos para o submodulo.


Link repositório.

git remote -v verifica quais as origens do repositório
git remote rm origin, remove as origens/links do repositorio online
git remote add origin + link, adiciona um novo repositorio remoto.


Análise e inspeção.
git diff HEAD: NuvemArquivo x LocalArquivo diferença

clear limpar comandos
git shortlog nos dá um resumo do log do projeto
git reflog: mais completo que o git log, mapea todas as ações anteriores


Admin Repos, performance.

Limpa arquivo untracked.(apaga)
git clean -f

(garbage collector) limpa arquivos não necessários para o projeto.
otimiza o repositório.
git gc 

Checar a integridade dos arquivos
git fsck (File system check)
Verifica a intregridade de arquivos e sua conectividade
Verificando possíveis currpções em arquivos. (Corrompido)


Backup Rápido do projeto, para compartilhamento.
git archive --format zip --output master_files.zip master

A importância do commit

O problema: Commits sem sentido atrapalham o projeto;
-Precisamos padronizar os commit, para que o projeto cresça de forma
saudável também no versionamento, isso ajuga em:
	Review do Pull Request;
	Melhoria dos log em git log;
	Manutenção do projeto (Voltar código, por exemplo);

Há uma solução chamada private branches
Onde criamos branches que não serão compartilhadas no repositório, então
podemos colocar qualquer commit 
Ao fim da solução do problema podemos fazer um rebase;
O comando será: git rebase<BranchAtual><BranchPrivado>-i
Escolhemos os branches para excluir(squash) e renomear com (reword)

link da aula: https://www.udemy.com/course/git-e-github-do-basico-ao-avancado-c-gist-e-github-pages/learn/lecture/29403304#overview

